(()=>{"use strict";var __webpack_modules__={581:()=>{eval('\n;// CONCATENATED MODULE: ./src/utils/helpers.js\n// Helpers\n\nvar gEl = function gEl(selection) {\n  var element = document.querySelector(selection);\n  if (element) {\n    return element;\n  } else {\n    throw Error("Such element ".concat(selection, " does not exist."));\n  }\n};\nvar cEl = function cEl(element) {\n  return document.createElement(element);\n};\nvar removeActive = function removeActive(arr, cls) {\n  arr.forEach(function (item) {\n    item.classList.remove(cls);\n  });\n};\nvar removeBefore = function removeBefore(wrapper) {\n  var getList = document.querySelectorAll(wrapper);\n  getList && getList.forEach(function (el) {\n    return el.remove();\n  });\n};\nvar calcTotal = function calcTotal(arr) {\n  var countTotal = 0;\n  arr.map(function (item) {\n    return countTotal += item.totalPrice;\n  });\n  return countTotal;\n};\n\n;// CONCATENATED MODULE: ./src/layout/layout.js\n\nvar bodyEl = gEl("body");\nfunction createNavbar() {\n  var nav = cEl("nav");\n  nav.classList.add("nav");\n  var ul = cEl("ul");\n  ul.classList.add("nav_list");\n  var logo = cEl("h2");\n  logo.classList.add("nav_logo");\n  logo.textContent = ".vanilla";\n  var cartListLength = JSON.parse(localStorage.getItem("cartList")) === null ? 0 : JSON.parse(localStorage.getItem("cartList")).length;\n  var menuItems = ["cart (".concat(cartListLength, ")"), "home", "post"];\n  menuItems.forEach(function (item) {\n    var li = cEl("li");\n    var a = cEl("a");\n    a.classList.add("nav_list-item");\n    a.textContent = item;\n    ul.appendChild(li);\n    li.appendChild(a);\n  });\n  ul.children[0].firstChild.href = "/neo-store/cart.html";\n  ul.children[1].firstChild.href = "/neo-store/";\n  ul.children[2].firstChild.href = "/neo-store/post.html";\n  bodyEl.appendChild(nav);\n  nav.appendChild(logo);\n  nav.appendChild(ul);\n}\nfunction createFooter() {\n  var footer = cEl("section");\n  footer.classList.add("footer");\n  var ul = cEl("ul");\n  ul.classList.add("nav_list");\n  var logo = cEl("h4");\n  logo.classList.add("footer-logo");\n  logo.innerHTML = "&copy; vanilla .js";\n  var menuItems = ["cart", "home", "post"];\n  menuItems.forEach(function (item) {\n    var li = cEl("li");\n    var a = cEl("a");\n    a.classList.add("nav_list-item");\n    a.textContent = item;\n    ul.appendChild(li);\n    li.appendChild(a);\n  });\n  ul.children[0].firstChild.href = "/neo-store/cart.html";\n  ul.children[1].firstChild.href = "/neo-store/";\n  ul.children[2].firstChild.href = "/neo-store/post.html";\n  bodyEl.appendChild(footer);\n  footer.appendChild(ul);\n  footer.appendChild(logo);\n}\n;// CONCATENATED MODULE: ./src/utils/api.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n// Api - fetch\n\nvar GET = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(limit) {\n    var response, data;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return fetch("https://api.escuelajs.co/api/v1/products?limit=".concat(limit, "&offset=30"));\n        case 3:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error("There was an error on response");\n        case 6:\n          _context.next = 8;\n          return response.json();\n        case 8:\n          data = _context.sent;\n          return _context.abrupt("return", data);\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](0);\n          console.log(_context.t0.message);\n          // loader.textContent = \'There was an error trying to load the content.\';\n        case 15:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return function GET(_x) {\n    return _ref.apply(this, arguments);\n  };\n}()));\nvar PUT = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(schema, path, method) {\n    var id,\n      response,\n      data,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          id = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : "";\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch("https://api.escuelajs.co/api/v1/" + path + "/" + id, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            },\n            body: JSON.stringify(schema)\n          });\n        case 4:\n          response = _context2.sent;\n          if (response.ok) {\n            _context2.next = 7;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 7:\n          _context2.next = 9;\n          return response.json();\n        case 9:\n          data = _context2.sent;\n          console.log("REPONSE POST: ", data);\n          _context2.next = 16;\n          break;\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2["catch"](1);\n          console.log(_context2.t0.message);\n        case 16:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 13]]);\n  }));\n  return function PUT(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar POST = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(schema, path, method) {\n    var response, data;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return fetch("https://api.escuelajs.co/api/v1/" + path, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            },\n            body: JSON.stringify(schema)\n          });\n        case 3:\n          response = _context3.sent;\n          if (response.ok) {\n            _context3.next = 6;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 6:\n          _context3.next = 8;\n          return response.json();\n        case 8:\n          data = _context3.sent;\n          console.log("REPONSE POST: ", data);\n          _context3.next = 15;\n          break;\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3["catch"](0);\n          console.log(_context3.t0.message);\n        case 15:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 12]]);\n  }));\n  return function POST(_x5, _x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar DELETE = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path, method) {\n    var id,\n      response,\n      data,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : "";\n          _context4.prev = 1;\n          _context4.next = 4;\n          return fetch("https://api.escuelajs.co/api/v1/" + path + "/" + id, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            }\n          });\n        case 4:\n          response = _context4.sent;\n          if (response.ok) {\n            _context4.next = 7;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 7:\n          _context4.next = 9;\n          return response.json();\n        case 9:\n          data = _context4.sent;\n          console.log("REPONSE POST: ", data);\n          _context4.next = 16;\n          break;\n        case 13:\n          _context4.prev = 13;\n          _context4.t0 = _context4["catch"](1);\n          console.log(_context4.t0.message);\n        case 16:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[1, 13]]);\n  }));\n  return function DELETE(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n/* harmony default export */ const api = ((/* unused pure expression or super */ null && (GET)));\n;// CONCATENATED MODULE: ./src/components/createSelection.js\n\nvar createSelection = function createSelection(mainSection) {\n  var selectMenu = cEl("select");\n  selectMenu.classList.add("selection");\n  var optionPost = cEl("option");\n  optionPost.value = "post";\n  optionPost.textContent = "post";\n  var optionPut = cEl("option");\n  optionPut.value = "put";\n  optionPut.textContent = "put";\n  var optionDelete = cEl("option");\n  optionDelete.value = "delete";\n  optionDelete.textContent = "delete";\n  mainSection.appendChild(selectMenu);\n  selectMenu.appendChild(optionPost);\n  selectMenu.appendChild(optionPut);\n  selectMenu.appendChild(optionDelete);\n};\n;// CONCATENATED MODULE: ./src/components/createPostForm.js\n\nvar createPostForm = function createPostForm(mainSection) {\n  var postForm = cEl("form");\n  postForm.classList.add("form");\n  postForm.classList.add("show");\n  postForm.classList.add("postForm");\n  postForm.id = "post-form";\n  var formTitle = cEl("h3");\n  formTitle.classList.add("formTitle");\n  formTitle.textContent = "Post Form";\n  var inputTitle = cEl("input");\n  inputTitle.classList.add("input");\n  inputTitle.id = "title";\n  inputTitle.type = "text";\n  var labelTitle = cEl("label");\n  labelTitle.setAttribute("for", "title");\n  labelTitle.textContent = "Title:";\n  var inputPrice = cEl("input");\n  inputPrice.classList.add("input");\n  inputPrice.id = "price";\n  inputPrice.type = "number";\n  var labelPrice = cEl("label");\n  labelPrice.setAttribute("for", "price");\n  labelPrice.textContent = "Price:";\n  var inputCategory = cEl("input");\n  inputCategory.classList.add("input");\n  inputCategory.id = "category";\n  inputCategory.type = "number";\n  var labelCategory = cEl("label");\n  labelCategory.setAttribute("for", "category");\n  labelCategory.textContent = "Category:";\n  var inputImg = cEl("input");\n  inputImg.classList.add("input");\n  inputImg.id = "img";\n  inputImg.type = "text";\n  var labelImg = cEl("label");\n  labelImg.setAttribute("for", "img");\n  labelImg.textContent = "Image:";\n  var textArea = cEl("textarea");\n  textArea.classList.add("input");\n  textArea.classList.add("textArea");\n  textArea.id = "description";\n  textArea.setAttribute("maxlength", "25");\n  var labelTextA = cEl("label");\n  labelTextA.setAttribute("for", "description");\n  labelTextA.textContent = "Description:";\n  var subInput = cEl("input");\n  subInput.classList.add("subInput");\n  subInput.value = "Send";\n  subInput.type = "submit";\n  mainSection.appendChild(postForm);\n  postForm.appendChild(formTitle);\n  postForm.appendChild(labelTitle);\n  postForm.appendChild(inputTitle);\n  postForm.appendChild(labelPrice);\n  postForm.appendChild(inputPrice);\n  postForm.appendChild(labelCategory);\n  postForm.appendChild(inputCategory);\n  postForm.appendChild(labelImg);\n  postForm.appendChild(inputImg);\n  postForm.appendChild(labelTextA);\n  postForm.appendChild(textArea);\n  postForm.appendChild(subInput);\n};\n;// CONCATENATED MODULE: ./src/components/createPutForm.js\n\nvar createPutForm = function createPutForm(mainSection) {\n  var putForm = cEl("form");\n  putForm.classList.add("form");\n  putForm.classList.add("putForm");\n  putForm.id = "put-form";\n  var formTitle = cEl("h3");\n  formTitle.classList.add("formTitle");\n  formTitle.textContent = "Put Form";\n  var inputTitle = cEl("input");\n  inputTitle.classList.add("input");\n  inputTitle.id = "title";\n  inputTitle.type = "text";\n  var labelTitle = cEl("label");\n  labelTitle.setAttribute("for", "title");\n  labelTitle.textContent = "Title:";\n  var inputPrice = cEl("input");\n  inputPrice.classList.add("input");\n  inputPrice.id = "price";\n  inputPrice.type = "number";\n  var labelPrice = cEl("label");\n  labelPrice.setAttribute("for", "price");\n  labelPrice.textContent = "Price:";\n  var inputCategory = cEl("input");\n  inputCategory.classList.add("input");\n  inputCategory.id = "category";\n  inputCategory.type = "number";\n  var labelCategory = cEl("label");\n  labelCategory.setAttribute("for", "category");\n  labelCategory.textContent = "Category:";\n  var inputImg = cEl("input");\n  inputImg.classList.add("input");\n  inputImg.id = "img";\n  inputImg.type = "text";\n  var labelImg = cEl("label");\n  labelImg.setAttribute("for", "img");\n  labelImg.textContent = "Image:";\n  var textArea = cEl("textarea");\n  textArea.classList.add("input");\n  textArea.classList.add("textArea");\n  textArea.id = "description";\n  textArea.setAttribute("maxlength", "25");\n  var labelTextA = cEl("label");\n  labelTextA.setAttribute("for", "description");\n  labelTextA.textContent = "Description:";\n  var subInput = cEl("input");\n  subInput.classList.add("subInput");\n  subInput.value = "Send";\n  subInput.type = "submit";\n  mainSection.appendChild(putForm);\n  putForm.appendChild(formTitle);\n  putForm.appendChild(labelTitle);\n  putForm.appendChild(inputTitle);\n  putForm.appendChild(labelPrice);\n  putForm.appendChild(inputPrice);\n  putForm.appendChild(labelCategory);\n  putForm.appendChild(inputCategory);\n  putForm.appendChild(labelImg);\n  putForm.appendChild(inputImg);\n  putForm.appendChild(labelTextA);\n  putForm.appendChild(textArea);\n  putForm.appendChild(subInput);\n};\n;// CONCATENATED MODULE: ./src/components/createDeleteForm.js\n\nvar createDelForm = function createDelForm(mainSection) {\n  var delForm = cEl("form");\n  delForm.classList.add("form");\n  delForm.classList.add("delForm");\n  delForm.id = "delete-form";\n  var formTitle = cEl("h3");\n  formTitle.classList.add("formTitle");\n  formTitle.textContent = "Delete Form";\n  var inputId = cEl("input");\n  inputId.classList.add("input");\n  inputId.id = "itemId";\n  inputId.type = "number";\n  var labelId = cEl("label");\n  labelId.setAttribute("for", "itemId");\n  labelId.textContent = "ID:";\n  var subInput = cEl("input");\n  subInput.classList.add("subInput");\n  subInput.value = "Send";\n  subInput.type = "submit";\n  mainSection.appendChild(delForm);\n  delForm.appendChild(formTitle);\n  delForm.appendChild(labelId);\n  delForm.appendChild(inputId);\n  delForm.appendChild(subInput);\n};\n;// CONCATENATED MODULE: ./src/components/createMainPost.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\nfunction createMainPost(bodyEl) {\n  var mainSection = cEl("section");\n  mainSection.classList.add("mainSection");\n  createSelection(mainSection);\n  createPostForm(mainSection);\n  createPutForm(mainSection);\n  createDelForm(mainSection);\n  bodyEl.appendChild(mainSection);\n  var selectForm = gEl(".selection");\n  var postForm = gEl(".postForm");\n  var putForm = gEl(".putForm");\n  var delForm = gEl(".delForm");\n  selectForm.addEventListener("change", function () {\n    var forms = _toConsumableArray(document.querySelectorAll(".form"));\n    forms.map(function (form) {\n      return form.classList.remove("show");\n    });\n    if (selectForm.value === "post") {\n      postForm.classList.add("show");\n    } else if (selectForm.value === "put") {\n      putForm.classList.add("show");\n    } else if (selectForm.value === "delete") {\n      delForm.classList.add("show");\n    }\n  });\n  postForm.addEventListener("submit", function (e) {\n    e.preventDefault();\n    var schema = {\n      title: e.target[0].value,\n      price: parseInt(e.target[1].value),\n      description: e.target[4].value,\n      categoryId: parseInt(e.target[2].value),\n      images: [e.target[3].value]\n    };\n    POST(schema, "products", "POST");\n  });\n  putForm.addEventListener("submit", function (e) {\n    e.preventDefault();\n    var schema = {\n      title: e.target[0].value,\n      price: parseInt(e.target[1].value),\n      description: e.target[4].value,\n      categoryId: parseInt(e.target[2].value),\n      images: [e.target[3].value]\n    };\n    PUT(schema, "products", "PUT", 207);\n  });\n  delForm.addEventListener("submit", function (e) {\n    e.preventDefault();\n    DELETE("products", "DELETE", parseInt(e.target[0].value));\n  });\n}\n;// CONCATENATED MODULE: ./src/pages/post/app.js\n\n\n\nvar app_bodyEl = gEl("body");\nwindow.addEventListener("DOMContentLoaded", createNavbar);\nwindow.addEventListener("DOMContentLoaded", createMainPost(app_bodyEl));\nwindow.addEventListener("DOMContentLoaded", createFooter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///581\n')}},__webpack_exports__={};__webpack_modules__[581]()})();