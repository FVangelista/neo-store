(()=>{"use strict";var __webpack_modules__={687:()=>{eval('\n;// CONCATENATED MODULE: ./src/utils/helpers.js\n// Helpers\n\nvar gEl = function gEl(selection) {\n  var element = document.querySelector(selection);\n  if (element) {\n    return element;\n  } else {\n    throw Error("Such element ".concat(selection, " does not exist."));\n  }\n};\nvar cEl = function cEl(element) {\n  return document.createElement(element);\n};\nvar removeActive = function removeActive(arr, cls) {\n  arr.forEach(function (item) {\n    item.classList.remove(cls);\n  });\n};\nvar removeBefore = function removeBefore(wrapper) {\n  var getList = document.querySelectorAll(wrapper);\n  getList && getList.forEach(function (el) {\n    return el.remove();\n  });\n};\nvar calcTotal = function calcTotal(arr) {\n  var countTotal = 0;\n  arr.map(function (item) {\n    return countTotal += item.totalPrice;\n  });\n  return countTotal;\n};\n\n;// CONCATENATED MODULE: ./src/layout/layout.js\n\nvar bodyEl = gEl("body");\nfunction createNavbar() {\n  var nav = cEl("nav");\n  nav.classList.add("nav");\n  var ul = cEl("ul");\n  ul.classList.add("nav_list");\n  var logo = cEl("h2");\n  logo.classList.add("nav_logo");\n  logo.textContent = ".vanilla";\n  var cartListLength = JSON.parse(localStorage.getItem("cartList")) === null ? 0 : JSON.parse(localStorage.getItem("cartList")).length;\n  var menuItems = ["cart (".concat(cartListLength, ")"), "home", "post"];\n  menuItems.forEach(function (item) {\n    var li = cEl("li");\n    var a = cEl("a");\n    a.classList.add("nav_list-item");\n    a.textContent = item;\n    ul.appendChild(li);\n    li.appendChild(a);\n  });\n  ul.children[0].firstChild.href = "/neo-store/cart.html";\n  ul.children[1].firstChild.href = "/neo-store/";\n  ul.children[2].firstChild.href = "/neo-store/post.html";\n  bodyEl.appendChild(nav);\n  nav.appendChild(logo);\n  nav.appendChild(ul);\n}\nfunction createFooter() {\n  var footer = cEl("section");\n  footer.classList.add("footer");\n  var ul = cEl("ul");\n  ul.classList.add("nav_list");\n  var logo = cEl("h4");\n  logo.classList.add("footer-logo");\n  logo.innerHTML = "&copy; vanilla .js";\n  var menuItems = ["cart", "home", "post"];\n  menuItems.forEach(function (item) {\n    var li = cEl("li");\n    var a = cEl("a");\n    a.classList.add("nav_list-item");\n    a.textContent = item;\n    ul.appendChild(li);\n    li.appendChild(a);\n  });\n  ul.children[0].firstChild.href = "/neo-store/cart.html";\n  ul.children[1].firstChild.href = "/neo-store/";\n  ul.children[2].firstChild.href = "/neo-store/post.html";\n  bodyEl.appendChild(footer);\n  footer.appendChild(ul);\n  footer.appendChild(logo);\n}\n;// CONCATENATED MODULE: ./src/components/createHero.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction createHero(bodyEl) {\n  var hero = cEl("section");\n  hero.classList.add("hero");\n  var heroInner = cEl("div");\n  heroInner.classList.add("heroInner");\n  var heroItem = cEl("div");\n  heroItem.classList.add("heroItem");\n  var heroItem_2 = cEl("div");\n  heroItem_2.classList.add("heroItem");\n  var heroItem_3 = cEl("div");\n  heroItem_3.classList.add("heroItem");\n  var navControls = cEl("div");\n  navControls.classList.add("navControls");\n  var control = cEl("span");\n  control.classList.add("active");\n  control.classList.add("control");\n  control.classList.add("c_1");\n  var control_2 = cEl("span");\n  control_2.classList.add("control");\n  control_2.classList.add("c_2");\n  var control_3 = cEl("span");\n  control_3.classList.add("control");\n  control_3.classList.add("c_3");\n  navControls.addEventListener("click", function (e) {\n    var controls = _toConsumableArray(document.querySelectorAll(".control"));\n    if (e.target.classList.contains("control")) {\n      controls.map(function (item) {\n        return item.classList.contains("active") && item.classList.remove("active");\n      });\n    }\n    console.log(window.innerWidth);\n    if (e.target.classList.contains("c_2")) {\n      e.target.classList.add("active");\n      heroInner.style.transform = "translateX(-93vw)";\n      if (window.innerWidth <= 1080) {\n        heroInner.style.transform = "translateX(-100vw)";\n      }\n    } else if (e.target.classList.contains("c_3")) {\n      e.target.classList.add("active");\n      heroInner.style.transform = "translateX(-186vw)";\n      if (window.innerWidth <= 1080) {\n        heroInner.style.transform = "translateX(-200vw)";\n      }\n    } else if (e.target.classList.contains("c_1")) {\n      e.target.classList.add("active");\n      heroInner.style.transform = "translateX(0)";\n    }\n  });\n  window.addEventListener("resize", function () {\n    var controls = _toConsumableArray(document.querySelectorAll(".control"));\n    if (window.innerWidth <= 1080) {\n      heroInner.style.transform = "translateX(0)";\n      controls.map(function (item) {\n        return item.classList.contains("active") && item.classList.remove("active");\n      });\n      controls[0].classList.add("active");\n    }\n  });\n  var heroImg = cEl("img");\n  heroImg.classList.add("heroImg");\n  var heroImg_2 = cEl("img");\n  heroImg_2.classList.add("heroImg");\n  var heroImg_3 = cEl("img");\n  heroImg_3.classList.add("heroImg");\n  heroImg_3.src = "https://images.unsplash.com/photo-1563286094-6e420626b6f3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=3275&q=80";\n  heroImg_2.src = "https://images.unsplash.com/photo-1481437156560-3205f6a55735?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=3295&q=80";\n  heroImg.src = "https://images.unsplash.com/photo-1540200049848-d9813ea0e120?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=3270&q=80";\n  bodyEl.appendChild(hero);\n  hero.appendChild(heroInner);\n  hero.appendChild(navControls);\n  navControls.appendChild(control);\n  navControls.appendChild(control_2);\n  navControls.appendChild(control_3);\n  heroInner.appendChild(heroItem);\n  heroInner.appendChild(heroItem_2);\n  heroInner.appendChild(heroItem_3);\n  heroItem.appendChild(heroImg);\n  heroItem_2.appendChild(heroImg_2);\n  heroItem_3.appendChild(heroImg_3);\n}\n;// CONCATENATED MODULE: ./src/utils/api.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n// Api - fetch\n\nvar GET = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(limit) {\n    var response, data;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return fetch("https://api.escuelajs.co/api/v1/products?limit=".concat(limit, "&offset=30"));\n        case 3:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error("There was an error on response");\n        case 6:\n          _context.next = 8;\n          return response.json();\n        case 8:\n          data = _context.sent;\n          return _context.abrupt("return", data);\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](0);\n          console.log(_context.t0.message);\n          // loader.textContent = \'There was an error trying to load the content.\';\n        case 15:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return function GET(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar PUT = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(schema, path, method) {\n    var id,\n      response,\n      data,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          id = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : "";\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch("https://api.escuelajs.co/api/v1/" + path + "/" + id, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            },\n            body: JSON.stringify(schema)\n          });\n        case 4:\n          response = _context2.sent;\n          if (response.ok) {\n            _context2.next = 7;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 7:\n          _context2.next = 9;\n          return response.json();\n        case 9:\n          data = _context2.sent;\n          console.log("REPONSE POST: ", data);\n          _context2.next = 16;\n          break;\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2["catch"](1);\n          console.log(_context2.t0.message);\n        case 16:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 13]]);\n  }));\n  return function PUT(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()));\nvar POST = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(schema, path, method) {\n    var response, data;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return fetch("https://api.escuelajs.co/api/v1/" + path, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            },\n            body: JSON.stringify(schema)\n          });\n        case 3:\n          response = _context3.sent;\n          if (response.ok) {\n            _context3.next = 6;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 6:\n          _context3.next = 8;\n          return response.json();\n        case 8:\n          data = _context3.sent;\n          console.log("REPONSE POST: ", data);\n          _context3.next = 15;\n          break;\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3["catch"](0);\n          console.log(_context3.t0.message);\n        case 15:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 12]]);\n  }));\n  return function POST(_x5, _x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}()));\nvar DELETE = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path, method) {\n    var id,\n      response,\n      data,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : "";\n          _context4.prev = 1;\n          _context4.next = 4;\n          return fetch("https://api.escuelajs.co/api/v1/" + path + "/" + id, {\n            method: method,\n            headers: {\n              "Content-Type": "application/json"\n            }\n          });\n        case 4:\n          response = _context4.sent;\n          if (response.ok) {\n            _context4.next = 7;\n            break;\n          }\n          throw new Error("There was an error seding your ".concat(method));\n        case 7:\n          _context4.next = 9;\n          return response.json();\n        case 9:\n          data = _context4.sent;\n          console.log("REPONSE POST: ", data);\n          _context4.next = 16;\n          break;\n        case 13:\n          _context4.prev = 13;\n          _context4.t0 = _context4["catch"](1);\n          console.log(_context4.t0.message);\n        case 16:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[1, 13]]);\n  }));\n  return function DELETE(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}()));\n/* harmony default export */ const api = (GET);\n;// CONCATENATED MODULE: ./src/components/createMain.js\n\n\nvar currentItems = JSON.parse(localStorage.getItem("cartList"));\nvar cartList = currentItems ? currentItems : [];\nfunction createMain(bodyEl) {\n  var mainSection = cEl("section");\n  mainSection.classList.add("mainSection");\n  var form = cEl("form");\n  form.classList.add("form");\n  var searchInput = cEl("input");\n  searchInput.classList.add("searchInput");\n  searchInput.type = "text";\n  searchInput.placeholder = "Search";\n  var mainContent = cEl("div");\n  mainContent.classList.add("mainContent");\n  bodyEl.appendChild(mainSection);\n  form.appendChild(searchInput);\n  mainSection.appendChild(form);\n  mainSection.appendChild(mainContent);\n  api(20).then(function (data) {\n    return data.map(function (item) {\n      return displayCards(item);\n    });\n  });\n  form.addEventListener("submit", function (e) {\n    e.preventDefault();\n    removeBefore(".card");\n    api(20).then(function (data) {\n      return data.filter(function (item) {\n        if (item.title.toLowerCase().includes(searchInput.value)) {\n          displayCards(item);\n        }\n      });\n    });\n  });\n  var displayCards = function displayCards(item) {\n    var id = item.id,\n      title = item.title,\n      description = item.description,\n      price = item.price,\n      images = item.images;\n    var card = cEl("div");\n    card.classList.add("card");\n    var imgsWrapper = cEl("div");\n    imgsWrapper.classList.add("imgsWrapper");\n    var infoWrapper = cEl("div");\n    infoWrapper.classList.add("infoWrapper");\n    var infoTitle = cEl("h3");\n    infoTitle.classList.add("infoTitle");\n    var infoPrice = cEl("span");\n    infoPrice.classList.add("infoPrice");\n    var btnsWrapper = cEl("div");\n    btnsWrapper.classList.add("btnsWrapper");\n    var leftBtn = cEl("span");\n    leftBtn.classList.add("cardBtn");\n    var rightBtn = cEl("span");\n    rightBtn.classList.add("cardBtn");\n    leftBtn.textContent = "<";\n    rightBtn.textContent = ">";\n    leftBtn.addEventListener("click", function () {\n      imgsWrapper.style.transform = "translateX(-500px)";\n      if (imgsWrapper.classList.contains("target")) {\n        imgsWrapper.style.transform = "translateX(0px)";\n        imgsWrapper.classList.remove("target");\n        return;\n      } else if (imgsWrapper.classList.contains("firstTarget")) {\n        imgsWrapper.style.transform = "translateX(-250px)";\n        imgsWrapper.classList.remove("firstTarget");\n        imgsWrapper.classList.add("target");\n        return;\n      }\n      imgsWrapper.classList.add("firstTarget");\n    });\n    rightBtn.addEventListener("click", function () {\n      console.log(imgsWrapper);\n      imgsWrapper.style.transform = "translateX(-250px)";\n      if (imgsWrapper.classList.contains("target")) {\n        imgsWrapper.style.transform = "translateX(-500px)";\n        imgsWrapper.classList.remove("target");\n        imgsWrapper.classList.add("firstTarget");\n        return;\n      } else if (imgsWrapper.classList.contains("firstTarget")) {\n        imgsWrapper.style.transform = "translateX(0)";\n        imgsWrapper.classList.remove("firstTarget");\n        return;\n      }\n      imgsWrapper.classList.add("target");\n    });\n    var btn = cEl("button");\n    btn.classList.add("btn");\n    btn.textContent = "add to cart";\n    btn.addEventListener("click", function () {\n      var cartSchema = {\n        id: item.id,\n        img: item.images[0],\n        title: item.title,\n        price: item.price,\n        qty: 1,\n        totalPrice: item.price\n      };\n      var cartListFiltering = cartList.filter(function (element) {\n        if (cartSchema.id === element.id) {\n          element.qty++;\n          element.totalPrice = element.totalPrice + price;\n          return element;\n        }\n      });\n      if (cartListFiltering.length === 0) {\n        cartList.push(cartSchema);\n      }\n      var count = 0;\n      cartList.map(function (item) {\n        count = count + item.qty;\n      });\n      window.localStorage.setItem("cartList", JSON.stringify(cartList));\n      console.log(cartListFiltering);\n      var cartLink = gEl(".nav_list-item");\n      cartLink.textContent = "cart (".concat(count, ")");\n    });\n    infoPrice.textContent = "$ ".concat(price);\n    infoTitle.textContent = title.split(" ").splice(0, 2).join(" ");\n    images.map(function (image) {\n      var imgCard = cEl("img");\n      imgCard.classList.add("imgCard");\n      imgCard.src = image;\n      imgsWrapper.appendChild(imgCard);\n    });\n    mainContent.appendChild(card);\n    card.appendChild(imgsWrapper);\n    card.appendChild(infoWrapper);\n    card.appendChild(btnsWrapper);\n    btnsWrapper.appendChild(leftBtn);\n    btnsWrapper.appendChild(rightBtn);\n    infoWrapper.appendChild(infoTitle);\n    infoWrapper.appendChild(infoPrice);\n    infoWrapper.appendChild(btn);\n  };\n}\n;// CONCATENATED MODULE: ./src/pages/home/app.js\n\n\n\n\nvar app_bodyEl = gEl("body");\nwindow.addEventListener("DOMContentLoaded", createNavbar);\nwindow.addEventListener("DOMContentLoaded", createHero(app_bodyEl));\nwindow.addEventListener("DOMContentLoaded", createMain(app_bodyEl));\nwindow.addEventListener("DOMContentLoaded", createFooter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///687\n')}},__webpack_exports__={};__webpack_modules__[687]()})();